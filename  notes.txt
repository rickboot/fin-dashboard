TypeScript
- Interface...

React
- useMemo
- useContext
- useReducer

Vite ('veet')
- like create-react-app -> webpack and babel?

Material UI
- ThemeContext
- can use css props in mui components
? why palette.grey[100] instead of palette.primary.grey[100] - because of TS module augmentation?

Emotion
- css lib

Folder structure
- What is the default react structure?


Redux
- predictable centralized state for javascript apps
- works on client, server, and native
- works with any ui layer and framework 
- easy to test and debug
- has large ecosystem of add-ons
- has libs for React - react-redux and redux toolkit

store is created via createStore (? configureStore)
- takes in reducer
 
reducer is created via combineReducers - 
- takes in a object of functions that run whenever dispatch is called
- the return value is the apps new state

dispatch 
- takes in type and item 

store is immutable
one way dataflow


action -> reducer -> store
   ^                   |
   |                   v
dispatch <- APP <- subscribe

mongoDB

mongoose
- use latest ^7
- Schema creates template
- Model creates instance (not a data entry)
  - responsible for creating and reading documents from the underlying MongoDB database. 
- use model instance insertMany inserts documents 
- Schema (template) > Model (create/reads/updates/deletes) > document(s)

use model() not Model() 

npm
- npm upgrade
- npm uninstall

cors issues
- remember app.use middleware are functions! - cors(), morgan(), helmet(), etc. 


Full-stack steps
- create features list
- create wireframe
- create folder structure
  - client
    - src 
      - components
      - pages or scenes
      - state
  - backend
    - models
    - routes
    - data

- build client
- build server
  - node.js
  - express
    - cors
    - body parser
    - morgan logging
    - helmet security?
- build db
  - mongodb or whatever
  - ORM or ODM (mongoose)
  - set up cloud account if any
  - seed data

RTK
- TS
- RTK createApi defines hooks to corresponding endpoints to fetch/transform redux state
- RTK fetchBaseQuery is a wrapper around fetch that simplifies requests

TypeScript
- Generics


FinanceSeer
- getKPI can be called once
- url(#colorRevenue) has to be unique per page - 2nd def does nothing?
- buyer should be String 
- separate code for seeding?
- biaxial charts are confusing without different colors